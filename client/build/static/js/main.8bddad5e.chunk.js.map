{"version":3,"sources":["utilities/API.js","utilities/FavoriteContext.js","components/MovieCard/index.js","components/MenuSlider/index.js","pages/MovieInfo/index.js","pages/Home/index.js","utilities/useEventListener.js","App.js","registerServiceWorker.js","index.js"],"names":["API","axios","get","FavoriteContext","createContext","MovieCard","props","favorites","useContext","react_default","a","createElement","Col","xs","id","className","Card","includes","movie","variant","src","alt","Spinner","animation","size","MenuSlider","items","category","row","Container","fluid","concat","key","Row","md","span","offset","style","margin","map","element","index","components_MovieCard","Poster","MovieInfo","inRef","faved","Image","replace","Title","Genre","Released","Runtime","imdbRating","Rated","ref","Plot","Director","Production","Actors","split","actor","Home","_useState","useState","selected","x","y","previous","menuGrid","gridStack","favChaged","redirect","_useState2","Object","slicedToArray","menu","setMenu","_useContext","addFavorite","removeFavorite","validKeys","menuToLoad","movieRef","useRef","useEffect","then","_ref","data","sort","sortByRelevance","createCategories","objectSpread","toConsumableArray","title","stack","window","location","hash","length","document","getElementById","classList","remove","add","auxArr","auxArr2","unshift","pop","b","parseFloat","imdbVotes","movies","categoriesArray","forEach","_step","_iterator","_createForOfIteratorHelper","s","n","done","_step2","value","match","_iterator2","conditions","condition","keyToCheck","err","e","f","push","allowRedundancy","eventName","handler","arguments","undefined","savedHandler","current","addEventListener","eventListener","event","removeEventListener","useEventListener","String","backToMenu","toggleFavorite","moveForward","moveBack","moveUp","moveDown","preventDefault","stopPropagation","previousElementSibling","nextElementSibling","shift","favChanged","contains","Fragment","pages_MovieInfo","el","components_MenuSlider","App","setFavorites","Provider","indexOf","splice","pages_Home","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","src_App_0","URL","process","origin","fetch","response","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8bddad5e.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default {\n    //gets all movies from database\n    getMovies: function() {\n      return axios.get(\"/api/movies\");\n    },\n\n    getFavorites: function() {\n      return axios.get(\"/api/favorites/\");\n    }\n  };\n  ","import {createContext} from \"react\"\n\nexport const FavoriteContext = createContext(null);\n","import React, {useContext} from \"react\";\nimport { Card, Col, Spinner } from 'react-bootstrap';\nimport {FavoriteContext} from \"../../utilities/FavoriteContext\";\nimport \"./style.css\";\n\n//our Tile structure, this component receives a movie object to render the proper picture\n\nconst MovieCard = (props) => {\n    const { favorites } = useContext(FavoriteContext);\n\n    return (\n        <Col xs={2} id={props.id} className={`selectableWrapper `}>\n            <Card className={`selectable `}>\n                <div className=\"favorited\" >{favorites.includes(props.movie) ? <i className=\"fas fa-heart\"></i> : <i className=\"far fa-heart\"></i>}</div>\n                <img variant=\"top\" src={props.src} alt={<Spinner animation=\"border\" variant=\"light\" size=\"xl\" />} />\n            </Card>\n        </Col>);\n}\n\nexport default MovieCard;","import React from \"react\";\nimport { Container, Row, Col } from 'react-bootstrap';\nimport MovieCard from \"../MovieCard/\"\nimport \"./style.css\";\n\nconst MenuSlider = (props) => {\n\n    const { items, category, row } = props\n//this component get an array(items) a title(category) and a number(row):\n// the array has all the movies that this component will display as tiles(movieCards)\n// the title is the name of the shelf,\n// the row helps the home component to now what item to look for (I consider it an index for mapping) \n    return (\n        <Container fluid className=\"SliderMenu\" id={`row${row}`} key={`row${row}`}>\n            <Row>\n                <Col md={{ span: 10, offset: 2 }}>\n                    <h3 style={{ margin: \"0 auto\" }}>{category}</h3>\n                </Col>\n            </Row>\n            <div className=\"scrollmenu d-flex align-items-center\">\n                {items.map((element, index) => <MovieCard src={element.Poster} movie={element} key={`${index},${row}`} id={`${index},${row}`} />)}\n            </div>\n        </Container>\n    );\n}\n\nexport default MenuSlider;","import React from \"react\";\nimport { Container, Row, Col, Image, Spinner } from 'react-bootstrap';\nimport \"./style.css\";\n\nconst MovieInfo = (props) => {\n\n    const { movie, inRef, faved } = props;\n\n    // This component gets an object and renders different key value pair to display info to the user, also notice that the heart icon\n    // has a ref that takes to the top of the app for easier manipulation\n    return (\n        <Container fluid className=\"infoContainer\">\n            <Row>\n                <Col xs={4}>\n                    <div className=\"moviePictureWrapper\">\n                        <Image src={movie.Poster.replace(\"SX300.jpg\", \"SX1000.jpg\")} alt={<Spinner animation=\"border\" variant=\"light\" />} fluid />\n                    </div>\n                </Col>\n                <Col className=\"movieTextInfo\">\n                    <h1>{movie.Title}</h1>\n                    <h3><span>{`${movie.Genre}`}</span> &middot; {`${movie.Released}`} &middot; {`${movie.Runtime}`} &middot;{` ${movie.imdbRating}`} &middot; {`${movie.Rated}`} </h3>\n                    <br></br>\n                    <div className=\"faved\" ><i ref={inRef} className={`${faved ? \"far\" : \"fas\"} fa-heart`}></i></div>\n                    <br></br>\n                    <h3>Plot</h3>\n                    <p>{movie.Plot}</p>\n                    <h3>Directed by:</h3>\n                    <p>{movie.Director}</p>\n                    <h3>Production</h3>\n                    <p>{movie.Production}</p>\n                    <h3>Starring</h3>\n                    <ul>\n                        {movie.Actors.split(\", \").map((actor, index) => <li key={`actor-${index}`}>{actor}</li>)}\n                    </ul>\n                </Col>\n            </Row>\n\n        </Container>\n    )\n}\n\nexport default MovieInfo;","import React, { useState, useEffect, useContext, useRef } from \"react\";\nimport API from \"../../utilities/API\";\nimport { Container } from \"react-bootstrap\"\nimport MenuSlider from \"../../components/MenuSlider\";\nimport useEventListener from '../../utilities/useEventListener';\nimport MovieInfo from \"../MovieInfo/\";\nimport { FavoriteContext } from \"../../utilities/FavoriteContext\";\nimport \"./style.css\";\n\nconst Home = (props) => {\n\n  //here we declare variables to use and desctructure props sent from app.js we also store the codes for valid keys;\n  const [menu, setMenu] = useState({ selected: { x: 0, y: 0 }, previous: { x: 0, y: 0 }, menuGrid: [], gridStack: [], favChaged: false, redirect: false })\n  const { favorites, addFavorite, removeFavorite } = useContext(FavoriteContext);\n  const { selected, menuGrid, previous, favChaged } = menu\n\n  const validKeys = ['ArrowDown', 37, \"ArrowUp\", 38, \"ArrowRight\", 39, \"ArrowLeft\", 40, \"Enter\", 13, \"Escape\", 27];\n\n  const { menuToLoad } = props;\n\n\n  // I use this ref to have direct control of a heart icon directly inside movieInfo page, this helps me to have a better control when we\n  // update our favorites context\n  const movieRef = useRef(null)\n\n  //useEffect section:\n\n  // this use effect runs when this component is invoked, here the component makes a http request that sends all movies, then movies are sorted \n  // and classify in their respective shelves, also set the attention to the first element of the dom, we also create an empty array to serve as\n  // buffer stack that way the app saves the items that have been discarded.\n  useEffect(() => {\n    API.getMovies().then(({ data }) => {\n      data.sort(sortByRelevance);\n      createCategories(data, menuToLoad);\n      setMenu({ ...menu, menuGrid: [...menuToLoad, { title: \"Favorites\", items: [] }], gridStack: [...menuToLoad.map(stack => []), []] });\n      window.location.hash = \"#\" + 0 + \",\" + selected.y;\n      window.location.hash = \"#row\" + selected.y;\n    });\n    return () => {\n    };\n  }, [])\n\n  // // this useEffect runs every time our state changes sending attention to the right element in the DOM. If there is no valid tile\n  // this function will check for the next valid tile based on a few conditionals\n\n  useEffect(() => {\n    if (menuGrid.length > 0 && !menu.redirect) {\n      if (!document.getElementById(0 + \",\" + selected.y)) {\n        if (menu.gridStack[selected.y].length > 0 && menuGrid[selected.y].items.length === 0) {\n          let auxArr = menuGrid;\n          let auxArr2 = menu.gridStack;\n          auxArr[selected.y].items.unshift(auxArr2[selected.y].pop());\n          setMenu({ ...menu, menuGrid: auxArr, gridStack: auxArr2 });\n        } else {\n          setMenu({ ...menu, selected: { ...selected, y: selected.y - 1 } })\n        }\n      } else {\n        document.getElementById(0 + \",\" + previous.y).classList.remove(\"selectedItem\");\n        document.getElementById(0 + \",\" + selected.y).classList.add(\"selectedItem\");\n        window.location.hash = \"#\" + selected.x + \",\" + selected.y;\n        window.location.hash = \"#row\" + selected.y;\n      }\n    }\n  }, [menu])\n\n  //functions section:\n\n\n  // here we sort movies based on an attribute that we considered the most relevant, I based this by multiplying imdbVotes\n  // with the imdbRating\n  const sortByRelevance = (a, b) => {\n    return (parseFloat(b.imdbVotes) * parseFloat(b.imdbRating)) - (parseFloat(a.imdbVotes) * parseFloat(a.imdbRating))\n  }\n\n\n  // once we got our movies sorted we classify them with this function. The function takes an array of objects (sent throug props from app.js)and each \n  //object contains a title which is the name of the shelf, an empty array, the key is looking to compare and and the value that\n  //the key has to contain to be valid, alternatively, each object can have an extra boolean attribute called allowRedundance that \n  // prevents movies to be many times in the menu grid, this works on cascade so once you forbid redundance, movies won't repeat below\n  const createCategories = (movies, categoriesArray) => {\n    movies.forEach(movie => {\n      for (const category of categoriesArray) {\n        let match = false;\n\n        for (const condition of category.conditions.split(\", \")) {\n          match = movie[category.keyToCheck].includes(condition);\n          if (!match)\n            break;\n        }\n\n        if (match) {\n          category.items.push(movie);\n          if (!category.allowRedundancy) {\n            break;\n          }\n        }\n      }\n    });\n  };\n\n  // here we call an events listener with that will handle keydown events\n\n  function handler(event) {\n    const { key } = event;\n    if (validKeys.includes(String(key))) {\n      if (!menu.redirect) {\n        switch (String(key)) {\n          case \"ArrowRight\":\n            moveForward();\n            break;\n          case \"ArrowLeft\":\n            moveBack();\n            break;\n          case \"ArrowUp\":\n            moveUp();\n            break;\n          case \"ArrowDown\":\n            moveDown();\n            break;\n          case \"Enter\":\n            setMenu({ ...menu, redirect: true })\n            break;\n          default:\n            return;\n        }\n      } else {\n        switch (String(key)) {\n          case \"Escape\":\n            backToMenu()\n            break;\n          case \"Enter\":\n            toggleFavorite()\n            break;\n          default:\n            return;\n\n        }\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  useEventListener('keydown', handler);\n\n\n  //below you find the functions that manipulate the menu state\n\n  // this functions help to change our selectors, horizontal ones change the value on the state by popping or shifting arrays\n  // vertical ones select the row we are in based on the information generated in the dom\n  const moveUp = () => {\n    if (document.getElementById(\"row\" + (selected.y)).previousElementSibling) {\n      setMenu({\n        ...menu,\n        previous: selected,\n        selected: { ...selected, y: document.getElementById(\"row\" + (selected.y)).previousElementSibling.id.replace(\"row\", \"\") }\n      })\n    }\n  }\n\n  const moveDown = () => {\n    if (document.getElementById(\"row\" + (selected.y)).nextElementSibling) {\n      setMenu({\n        ...menu,\n        previous: selected,\n        selected: { ...selected, y: document.getElementById(\"row\" + (selected.y)).nextElementSibling.id.replace(\"row\", \"\") }\n      })\n    }\n  }\n\n  const moveForward = () => {\n    if (menuGrid[selected.y].items.length > 1) {\n      let auxArr = menuGrid;\n      let auxArr2 = menu.gridStack;\n      auxArr2[selected.y].push(auxArr[selected.y].items.shift());\n      setMenu({ ...menu, menuGrid: auxArr, gridStack: auxArr2 });\n    }\n  }\n\n  const moveBack = () => {\n    if (menu.gridStack[selected.y].length > 0) {\n      let auxArr = menuGrid;\n      let auxArr2 = menu.gridStack;\n      auxArr[selected.y].items.unshift(auxArr2[selected.y].pop());\n      setMenu({ ...menu, menuGrid: auxArr, gridStack: auxArr2 });\n    }\n  }\n\n// backToMenu is called every time we press escape inside the MovieInfo page, this function is responsible of checking if the user wants to\n// add a movie to favorites \n\n  const backToMenu = () => {\n    if (menu.redirect) {\n      if (favChaged) {\n        addFavorite(menuGrid[selected.y].items[0]);\n      } else {\n        removeFavorite(menuGrid[selected.y].items[0]);\n      }\n    }\n    let auxArr = menuGrid;\n    auxArr[auxArr.length - 1].items = favorites;\n    setMenu({ ...menu, redirect: false, favChanged: false, menuGrid: auxArr });\n  }\n\n  //here we change the heart icon inside the movieInfo page and by doing that we tell the state if we want to manipulate our favorites array\n  // this also helps to have a better control of when we check to favorites,\n  // I use a ref inside movieInfo to have direct control of heart icon properties\n  const toggleFavorite = () => {\n    if (movieRef.current.classList.contains(\"far\")) { //true to false\n      movieRef.current.classList.replace(\"far\", \"fas\");\n      setMenu({ ...menu, favChaged: true });\n    } else {\n      movieRef.current.classList.replace(\"fas\", \"far\"); //false to true\n      setMenu({ ...menu, favChaged: false });\n    }\n\n  }\n\n\n  return (\n    <>\n\n      {/* this component can render wether the info page of a movie or the menuGrid */}\n      {menu.redirect ? (\n\n        <Container fluid>\n\n          <MovieInfo movie={menuGrid[selected.y].items[0]} inRef={movieRef} faved={!favorites.includes(menuGrid[selected.y].items[selected.x])} toggleFavorite={toggleFavorite} />\n\n        </Container>)\n\n        : (\n          <Container fluid>\n            {/* this component renders menu rows depending on the size of the menuGrid, is a row is empty, it wont be display */}\n            {menuGrid.map((el, row) => el.items.length > 0 ? <MenuSlider items={el.items} category={el.title} row={row} key={`menuSlider-${row}`}/> : \"\")}\n\n          </Container>\n        )}\n    </>\n  )\n\n\n}\n\nexport default Home;\n","import {useEffect, useRef} from \"react\";\n\nexport default function useEventListener(eventName, handler, element = window){\n    const savedHandler = useRef();\n\n    // Update ref.current value if handler changes.\n    // This allows our effect below to always get latest handler\n    // without us needing to pass it in effect deps array\n    // and potentially cause effect to re-run every render.\n    useEffect(() => {\n      savedHandler.current = handler;\n    }, [handler]);\n  \n    useEffect(\n      () => {\n        // Make sure element supports addEventListener\n        // On \n        const isSupported = element && element.addEventListener;\n        if (!isSupported) return;\n  \n        // Create event listener that calls handler function stored in ref\n        const eventListener = event => savedHandler.current(event);\n  \n        // Add event listener\n        element.addEventListener(eventName, eventListener);\n  \n        // Remove event listener on cleanup\n        return () => {\n          element.removeEventListener(eventName, eventListener);\n        };\n      },\n      [eventName, element] // Re-run if eventName or element changes\n    );\n  }","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Home from \"./pages/Home\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FavoriteContext } from \"./utilities/FavoriteContext\";\n\nconst App = () => {\n\n\n  //here I defined the tiles I want to generate, this are sent to our home component which will take care of them in the proper manner\n  const menuToLoad = [\n    { title: \"Top of 2019\", keyToCheck: \"Year\", conditions: \"2019\", items: [], allowRedundancy: true },\n    { title: \"Top of 2018\", keyToCheck: \"Year\", conditions: \"2018\", items: [], allowRedundancy: true },\n    { title: \"Mystery Drama\", keyToCheck: \"Genre\", conditions: \"Mystery, Drama\", items: [], allowRedundancy: true },\n    { title: \"Action\", keyToCheck: \"Genre\", conditions: \"Action\", items: [] },\n    { title: \"Fantasy\", keyToCheck: \"Genre\", conditions: \"Fantasy\", items: [] },\n    { title: \"Thriller\", keyToCheck: \"Genre\", conditions: \"Thriller\", items: [] }\n  ];\n\n\n  // we create a state to control our favorites array, it helps to deal with React's asynchronicity, we also create functions to \n  // make our updates in a safer and more robust way\n  const [favorites, setFavorites] = useState([])\n\n  const removeFavorite = (id) => {\n\n    if (favorites.indexOf(id) !== -1) {\n      let auxArr = favorites;\n      auxArr.splice(auxArr.indexOf(id), 1);\n      setFavorites(auxArr);\n    }\n  }\n\n  const addFavorite = (movie) => {\n    if (favorites.indexOf(movie) === -1) {\n      let auxArr = favorites;\n      auxArr.push(movie)\n      setFavorites(auxArr);\n    }\n  }\n\n  return (\n    //I use a context provider since drilling to every single render item that requires the favorites info might get complicated, besides\n    //I consider this User information (top priority)\n      <FavoriteContext.Provider value={{ favorites, addFavorite, removeFavorite }}>\n              <Home menuToLoad={menuToLoad} key=\"HomeMenu\"/>\n      </FavoriteContext.Provider>\n  );\n}\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}